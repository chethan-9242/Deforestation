{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'https://your-railway-app.railway.app';const api=axios.create({baseURL:API_BASE_URL,timeout:30000// 30 seconds timeout for predictions\n});export const predictImage=async file=>{const formData=new FormData();formData.append('file',file);try{const response=await api.post('/predict',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){if(axios.isAxiosError(error)){var _error$response,_error$response$data;const message=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||error.message;throw new Error(\"Prediction failed: \".concat(message));}throw new Error('Prediction failed: Unknown error');}};export const getModelStatus=async()=>{try{const response=await api.get('/model/status');return response.data;}catch(error){if(axios.isAxiosError(error)){var _error$response2,_error$response2$data;const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||error.message;throw new Error(\"Failed to get model status: \".concat(message));}throw new Error('Failed to get model status: Unknown error');}};export const getClasses=async()=>{try{const response=await api.get('/classes');return response.data;}catch(error){if(axios.isAxiosError(error)){var _error$response3,_error$response3$data;const message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.detail)||error.message;throw new Error(\"Failed to get classes: \".concat(message));}throw new Error('Failed to get classes: Unknown error');}};export const healthCheck=async()=>{try{const response=await api.get('/health');return response.data;}catch(error){if(axios.isAxiosError(error)){var _error$response4,_error$response4$data;const message=((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.detail)||error.message;throw new Error(\"Health check failed: \".concat(message));}throw new Error('Health check failed: Unknown error');}};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","predictImage","file","formData","FormData","append","response","post","headers","data","error","isAxiosError","_error$response","_error$response$data","message","detail","Error","concat","getModelStatus","get","_error$response2","_error$response2$data","getClasses","_error$response3","_error$response3$data","healthCheck","_error$response4","_error$response4$data"],"sources":["C:/Users/Chethan/OneDrive/Desktop/Deforestation/Deforestation/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { PredictionResult, ModelStatus } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://your-railway-app.railway.app';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds timeout for predictions\n});\n\nexport const predictImage = async (file: File): Promise<PredictionResult> => {\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    const response = await api.post('/predict', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const message = error.response?.data?.detail || error.message;\n      throw new Error(`Prediction failed: ${message}`);\n    }\n    throw new Error('Prediction failed: Unknown error');\n  }\n};\n\nexport const getModelStatus = async (): Promise<ModelStatus> => {\n  try {\n    const response = await api.get('/model/status');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const message = error.response?.data?.detail || error.message;\n      throw new Error(`Failed to get model status: ${message}`);\n    }\n    throw new Error('Failed to get model status: Unknown error');\n  }\n};\n\nexport const getClasses = async () => {\n  try {\n    const response = await api.get('/classes');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const message = error.response?.data?.detail || error.message;\n      throw new Error(`Failed to get classes: ${message}`);\n    }\n    throw new Error('Failed to get classes: Unknown error');\n  }\n};\n\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const message = error.response?.data?.detail || error.message;\n      throw new Error(`Health check failed: ${message}`);\n    }\n    throw new Error('Health check failed: Unknown error');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}