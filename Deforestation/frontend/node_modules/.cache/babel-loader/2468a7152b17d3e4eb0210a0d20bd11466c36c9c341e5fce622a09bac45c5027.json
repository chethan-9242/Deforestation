{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000 // 30 seconds timeout for predictions\n});\nexport const predictImage = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await api.post('/predict', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message;\n      throw new Error(`Prediction failed: ${message}`);\n    }\n    throw new Error('Prediction failed: Unknown error');\n  }\n};\nexport const getModelStatus = async () => {\n  try {\n    const response = await api.get('/model/status');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || error.message;\n      throw new Error(`Failed to get model status: ${message}`);\n    }\n    throw new Error('Failed to get model status: Unknown error');\n  }\n};\nexport const getClasses = async () => {\n  try {\n    const response = await api.get('/classes');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || error.message;\n      throw new Error(`Failed to get classes: ${message}`);\n    }\n    throw new Error('Failed to get classes: Unknown error');\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || error.message;\n      throw new Error(`Health check failed: ${message}`);\n    }\n    throw new Error('Health check failed: Unknown error');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","predictImage","file","formData","FormData","append","response","post","headers","data","error","isAxiosError","_error$response","_error$response$data","message","detail","Error","getModelStatus","get","_error$response2","_error$response2$data","getClasses","_error$response3","_error$response3$data","healthCheck","_error$response4","_error$response4$data"],"sources":["C:/Users/Chethan/OneDrive/Desktop/Deforestation/Deforestation/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { PredictionResult, ModelStatus } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // 30 seconds timeout for predictions\r\n});\r\n\r\nexport const predictImage = async (file: File): Promise<PredictionResult> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  try {\r\n    const response = await api.post('/predict', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      const message = error.response?.data?.detail || error.message;\r\n      throw new Error(`Prediction failed: ${message}`);\r\n    }\r\n    throw new Error('Prediction failed: Unknown error');\r\n  }\r\n};\r\n\r\nexport const getModelStatus = async (): Promise<ModelStatus> => {\r\n  try {\r\n    const response = await api.get('/model/status');\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      const message = error.response?.data?.detail || error.message;\r\n      throw new Error(`Failed to get model status: ${message}`);\r\n    }\r\n    throw new Error('Failed to get model status: Unknown error');\r\n  }\r\n};\r\n\r\nexport const getClasses = async () => {\r\n  try {\r\n    const response = await api.get('/classes');\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      const message = error.response?.data?.detail || error.message;\r\n      throw new Error(`Failed to get classes: ${message}`);\r\n    }\r\n    throw new Error('Failed to get classes: Unknown error');\r\n  }\r\n};\r\n\r\nexport const healthCheck = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      const message = error.response?.data?.detail || error.message;\r\n      throw new Error(`Health check failed: ${message}`);\r\n    }\r\n    throw new Error('Health check failed: Unknown error');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}