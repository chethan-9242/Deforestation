{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chethan\\\\OneDrive\\\\Desktop\\\\Deforestation\\\\Deforestation\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { predictImage, getModelStatus } from './services/api.ts';\nimport LandingPage from './LandingPage.tsx';\nimport Dashboard from './Dashboard.tsx';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [prediction, setPrediction] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [modelStatus, setModelStatus] = useState(null);\n  const [showLanding, setShowLanding] = useState(true);\n\n  // Check model status on component mount\n  React.useEffect(() => {\n    const checkModelStatus = async () => {\n      try {\n        const status = await getModelStatus();\n        setModelStatus(status);\n      } catch (err) {\n        console.error('Failed to check model status:', err);\n      }\n    };\n    checkModelStatus();\n  }, []);\n  const onDrop = useCallback(async acceptedFiles => {\n    const file = acceptedFiles[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    setPrediction(null);\n    try {\n      const result = await predictImage(file);\n      setPrediction(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Prediction failed');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.bmp', '.webp']\n    },\n    multiple: false\n  });\n  const resetPrediction = () => {\n    setPrediction(null);\n    setError(null);\n  };\n  if (showLanding) {\n    return /*#__PURE__*/_jsxDEV(LandingPage, {\n      onGetStarted: () => setShowLanding(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Dashboard, {\n    onBackToLanding: () => setShowLanding(true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"VL+zmMIZ8je0nH9nbQSbLmNCKB0=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useDropzone","predictImage","getModelStatus","LandingPage","Dashboard","jsxDEV","_jsxDEV","App","_s","prediction","setPrediction","loading","setLoading","error","setError","modelStatus","setModelStatus","showLanding","setShowLanding","useEffect","checkModelStatus","status","err","console","onDrop","acceptedFiles","file","result","Error","message","getRootProps","getInputProps","isDragActive","accept","multiple","resetPrediction","onGetStarted","fileName","_jsxFileName","lineNumber","columnNumber","onBackToLanding","_c","$RefreshReg$"],"sources":["C:/Users/Chethan/OneDrive/Desktop/Deforestation/Deforestation/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Upload, Image as ImageIcon, BarChart3, Download, RefreshCw, Home, Leaf } from 'lucide-react';\nimport { PredictionResult, ClassPercentage } from './types/index';\nimport { predictImage, getModelStatus } from './services/api.ts';\nimport ImageGallery from './components/ImageGallery.tsx';\nimport ClassDistribution from './components/ClassDistribution.tsx';\nimport LoadingSpinner from './components/LoadingSpinner.tsx';\nimport LandingPage from './LandingPage.tsx';\nimport Dashboard from './Dashboard.tsx';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [prediction, setPrediction] = useState<PredictionResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [modelStatus, setModelStatus] = useState<{ loaded: boolean; classes: string[] } | null>(null);\n  const [showLanding, setShowLanding] = useState(true);\n\n  // Check model status on component mount\n  React.useEffect(() => {\n    const checkModelStatus = async () => {\n      try {\n        const status = await getModelStatus();\n        setModelStatus(status);\n      } catch (err) {\n        console.error('Failed to check model status:', err);\n      }\n    };\n    checkModelStatus();\n  }, []);\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    const file = acceptedFiles[0];\n    if (!file) return;\n\n    setLoading(true);\n    setError(null);\n    setPrediction(null);\n\n    try {\n      const result = await predictImage(file);\n      setPrediction(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Prediction failed');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.bmp', '.webp']\n    },\n    multiple: false\n  });\n\n  const resetPrediction = () => {\n    setPrediction(null);\n    setError(null);\n  };\n\n  if (showLanding) {\n    return <LandingPage onGetStarted={() => setShowLanding(false)} />;\n  }\n\n  return <Dashboard onBackToLanding={() => setShowLanding(true)} />;\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}